        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* unittest2.c : tests isGameOver() */
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:#define TESTFN "isGameOver()"
        -:    9:
function isGameOverTest called 4 returned 100% blocks executed 100%
        4:   10:int isGameOverTest(struct gameState *state) {
        -:   11:    int i;
        -:   12:    int j;
        -:   13:	
        -:   14:    //if stack of Province cards is empty, the game ends
        4:   15:    if (state->supplyCount[province] == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   16:    {
        1:   17:      return 1;
        -:   18:    }
        -:   19:
        -:   20:    //if three supply pile are at 0, the game ends
        3:   21:    j = 0;
       78:   22:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   23:    {
       75:   24:        if (state->supplyCount[i] == 0)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   25:        {
       26:   26:            j++;
        -:   27:        }
        -:   28:    }
        3:   29:    if (j >= 3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   30:    {
        1:   31:        printf("returning from here\n");
call    0 returned 100%
        1:   32:        return 1;
        -:   33:    }
        -:   34:
        2:   35:    return 0;
        -:   36:}
        -:   37:
function main called 1 returned 100% blocks executed 76%
        1:   38:int main (int argc, char** argv) {
        -:   39:
        1:   40:    int passFlag = 1;
        -:   41:    int i;
        1:   42:    int seed = 1000;
        1:   43:    int numPlayers = 2;
        1:   44:    int thisPlayer = 0;
        -:   45:	struct gameState G, testG;
        -:   46:    
        1:   47:	printf("----------------- Testing Function: %s ----------------\n", TESTFN);
call    0 returned 100%
        -:   48:
        -:   49:	// ----------- TEST 1: Out of province cards --------------
        1:   50:	printf("TEST 1: Out of province cards\n");
call    0 returned 100%
        -:   51:
        -:   52:    // set province cards to 0
        1:   53:    G.supplyCount[province] = 0;
        1:   54:    if (isGameOverTest(&G)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   55:        printf("passed\n");
call    0 returned 100%
        -:   56:    } else {
    #####:   57:        printf("failed\n");
call    0 never executed
    #####:   58:        passFlag = 0;
        -:   59:    }
        -:   60:
        -:   61:    // ----------- TEST 2: Three card supplies at 0 --------------
        1:   62:	printf("TEST 2: Three card supplies at 0\n");
call    0 returned 100%
        -:   63:
        -:   64:    // set card supplies to 0
      109:   65:    for (i = 0; i < sizeof(G.supplyCount); ++i) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      108:   66:        G.supplyCount[i] = 0;
        -:   67:    }
        1:   68:    G.supplyCount[province] = 1;
        -:   69:
        1:   70:    if (isGameOverTest(&G)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   71:        printf("passed\n");
call    0 returned 100%
        -:   72:    } else {
    #####:   73:        printf("failed\n");
call    0 never executed
    #####:   74:        passFlag = 0;
        -:   75:    }
        -:   76:
        -:   77:    // ----------- TEST 3: Boundary cases ------------
        1:   78:	printf("TEST 3: Boundary cases\n");
call    0 returned 100%
        -:   79:
        -:   80:    // no supplies at 0
      109:   81:    for (i = 0; i < sizeof(G.supplyCount); ++i) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      108:   82:        G.supplyCount[i] = 1;
        -:   83:    }
        -:   84:    
        1:   85:    if (isGameOverTest(&G) != 1) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   86:        printf("passed no supplies at 0\n");
call    0 returned 100%
        -:   87:    } else {
    #####:   88:        printf("failed no supplies at 0\n");
call    0 never executed
    #####:   89:        passFlag = 0;
        -:   90:    }
        -:   91:    
        -:   92:    // two supplies at 0 
        1:   93:    G.supplyCount[0] = 0;
        1:   94:    G.supplyCount[24] = 0;
        -:   95:
        1:   96:    if (isGameOverTest(&G) != 1) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   97:        printf("passed two supplies at 0\n");
call    0 returned 100%
        -:   98:    } else {
    #####:   99:        printf("failed two supplies at 0\n");
call    0 never executed
    #####:  100:        passFlag = 0;
        -:  101:    }
        -:  102:
        1:  103:    if (passFlag) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  104:        printf("SUCCESS: all tests passed\n");
call    0 returned 100%
        -:  105:    }
        -:  106:
        1:  107:    return 0;
        -:  108:}
