        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* unittest1.c : tests TestfullDeckCount() */
        -:    2:
        -:    3:#include "dominion.h"
        -:    4:#include <stdio.h>
        -:    5:#include "rngs.h"
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:#define TESTFN "TestfullDeckCount()"
        -:    9:
function TestfullDeckCount called 3 returned 100% blocks executed 100%
        3:   10:int TestfullDeckCount(int player, int card, struct gameState *state) {
        -:   11:  int i;
        3:   12:  int count = 0;
        -:   13:
       33:   14:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   15:    {
       30:   16:      if (state->deck[player][i] == card) count++;
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:   17:    }
        -:   18:
       18:   19:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   20:    {
       15:   21:      if (state->hand[player][i] == card) count++;
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:   22:    }
        -:   23:
       33:   24:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   25:    {
       30:   26:      if (state->discard[player][i] == card) count++;
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   27:    }
        -:   28:
        3:   29:  return count;
        -:   30:}
        -:   31:
function main called 1 returned 100% blocks executed 86%
        1:   32:int main (int argc, char** argv) {
        -:   33:
        1:   34:    const int player1 = 1;
        1:   35:    const int player2 = 2;
        1:   36:    const int player3 = 3;
        1:   37:    const int player4 = 4;
        -:   38:
        1:   39:    int passFlag = 1;
        -:   40:    int i;
        1:   41:    int seed = 1000;
        1:   42:    int numPlayers = 2;
        1:   43:    int thisPlayer = 0;
        -:   44:	struct gameState G, testG;
        -:   45:    /*
        -:   46:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   47:			sea_hag, tribute, smithy, council_room};
        -:   48:
        -:   49:	// initialize a game state and player cards
        -:   50:	initializeGame(numPlayers, k, seed, &G);
        -:   51:    */
        -:   52:
        1:   53:	printf("----------------- Testing Function: %s ----------------\n", TESTFN);
call    0 returned 100%
        -:   54:
        -:   55:	// ----------- TEST 1: All decks contain some of card  --------------
        1:   56:	printf("TEST 1: All three decks contain card \n");
call    0 returned 100%
        -:   57:
        -:   58:    // load G with test values
        1:   59:    G.deckCount[player1] = 10;
        6:   60:    for (i = 0; i < 5; ++i) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   61:        G.deck[player1][i] = estate;
        -:   62:    }
        6:   63:    for (i = 5; i < 10; ++i) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   64:        G.deck[player1][i] = copper;
        -:   65:    }
        1:   66:    G.handCount[player1] = 5;
        3:   67:    for (i = 0; i < 2; ++i) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:   68:        G.hand[player1][i] = copper;
        -:   69:    }
        4:   70:    for (i = 2; i < 5; ++i) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:   71:        G.hand[player1][i] = estate;
        -:   72:    }
        1:   73:    G.discardCount[player1] = 10;
        6:   74:    for (i = 0; i < 5; ++i) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   75:        G.discard[player1][i] = copper;
        -:   76:    }
        6:   77:    for (i = 5; i < 10; ++i) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   78:        G.discard[player1][i] = estate;
        -:   79:    }
        -:   80:
        1:   81:    int count = TestfullDeckCount(1, estate, &G);
call    0 returned 100%
        1:   82:    if (count == 13) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   83:        printf("passed\n");
call    0 returned 100%
        -:   84:    } else {
    #####:   85:        printf("failed\n");
call    0 never executed
    #####:   86:        passFlag = 0;
        -:   87:    }
        -:   88:
        -:   89:    // ----------- TEST 2: All decks do not contain card  --------------
        1:   90:	printf("TEST 2: All three decks do not contain card \n");
call    0 returned 100%
        -:   91:
        1:   92:    count = TestfullDeckCount(1, province, &G);
call    0 returned 100%
        1:   93:    if (count == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   94:        printf("passed\n");
call    0 returned 100%
        -:   95:    } else {
    #####:   96:        printf("failed\n");
call    0 never executed
    #####:   97:        passFlag = 0;
        -:   98:    }
        -:   99:
        -:  100:    // ----------- TEST 3: Some decks contain card  --------------
        1:  101:	printf("TEST 3: Some decks contain card \n");
call    0 returned 100%
        -:  102:
        -:  103:    // load G with test values
        6:  104:    for (i = 5; i < 10; ++i) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  105:        G.discard[player1][i] = gold;
        -:  106:    }
        -:  107:
        1:  108:    count = TestfullDeckCount(1, gold, &G);
call    0 returned 100%
        1:  109:    if (count == 5) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  110:        printf("passed\n");
call    0 returned 100%
        -:  111:    } else {
    #####:  112:        printf("failed\n");
call    0 never executed
    #####:  113:        passFlag = 0;
        -:  114:    }
        -:  115:
        1:  116:    if (passFlag) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  117:        printf("SUCCESS: all tests passed\n");
call    0 returned 100%
        -:  118:    }
        -:  119:
        1:  120:  return 0;
        -:  121:}
